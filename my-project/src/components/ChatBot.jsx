import { useState, useRef, useEffect } from 'react';

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    { text: '–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', sender: 'bot' }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = () => {
    if (inputMessage.trim() === '') return;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage = { text: inputMessage, sender: 'user' };
    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    setTimeout(() => {
      const botResponse = generateBotResponse(inputMessage);
      setMessages(prev => [...prev, { text: botResponse, sender: 'bot' }]);
    }, 1000);
  };

  const generateBotResponse = (message) => {
    const lowerMessage = message.toLowerCase();

    if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç') || lowerMessage.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
      return '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å. –ö–∞–∫ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–æ–≤?';
    } else if (lowerMessage.includes('–¥–æ—Å—Ç–∞–≤–∫–∞') || lowerMessage.includes('–¥–æ—Å—Ç–∞–≤–∫—É')) {
      return '–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 100$.';
    } else if (lowerMessage.includes('—Ü–µ–Ω–∞') || lowerMessage.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')) {
      return '–í—Å–µ —Ü–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É?';
    } else if (lowerMessage.includes('–≥–∞—Ä–∞–Ω—Ç–∏—è') || lowerMessage.includes('–≤–æ–∑–≤—Ä–∞—Ç')) {
      return '–ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≤—Å—é —Ç–µ—Ö–Ω–∏–∫—É - 1 –≥–æ–¥. –í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π.';
    } else if (lowerMessage.includes('—Å–º–∞—Ä—Ç—Ñ–æ–Ω') || lowerMessage.includes('—Ç–µ–ª–µ—Ñ–æ–Ω')) {
      return '–£ –Ω–∞—Å –µ—Å—Ç—å iPhone, Samsung –∏ –¥—Ä—É–≥–∏–µ —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "smartphones"!';
    } else if (lowerMessage.includes('–Ω–æ—É—Ç–±—É–∫') || lowerMessage.includes('laptop')) {
      return '–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "laptops" –≤—ã –Ω–∞–π–¥–µ—Ç–µ MacBook, Dell, Surface –∏ –¥—Ä—É–≥–∏–µ –Ω–æ—É—Ç–±—É–∫–∏.';
    } else {
      return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –µ—â–µ —É—á—É—Å—å. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç–∞–≤–∫–µ, —Ü–µ–Ω–∞—Ö, –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö!';
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSendMessage();
    }
  };

  return (
    <>
      {/* –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ */}
      <button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 bg-blue-600 text-white w-14 h-14 rounded-full shadow-lg hover:bg-blue-700 transition z-50 flex items-center justify-center"
      >
        üí¨
      </button>

      {/* –û–∫–Ω–æ —á–∞—Ç–∞ */}
      {isOpen && (
        <div className="fixed bottom-20 right-6 w-80 h-96 bg-white rounded-lg shadow-xl z-50 flex flex-col border border-gray-200">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="bg-blue-600 text-white p-4 rounded-t-lg flex justify-between items-center">
            <h3 className="font-semibold">–ß–∞—Ç-–ø–æ–º–æ—â–Ω–∏–∫</h3>
            <button 
              onClick={() => setIsOpen(false)}
              className="text-white hover:text-gray-200"
            >
              ‚úï
            </button>
          </div>

          {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
          <div className="flex-1 p-4 overflow-y-auto bg-gray-50">
            {messages.map((message, index) => (
              <div
                key={index}
                className={`mb-3 ${message.sender === 'user' ? 'text-right' : 'text-left'}`}
              >
                <div
                  className={`inline-block px-4 py-2 rounded-lg max-w-xs ${
                    message.sender === 'user'
                      ? 'bg-blue-600 text-white'
                      : 'bg-white text-gray-800 border border-gray-200'
                  }`}
                >
                  {message.text}
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>

          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
          <div className="p-4 border-t border-gray-200">
            <div className="flex space-x-2">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                className="flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:border-blue-500"
              />
              <button
                onClick={handleSendMessage}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition"
              >
                –≤–≤–æ–¥
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default ChatBot;